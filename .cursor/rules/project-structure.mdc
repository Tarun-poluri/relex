description: RelaxFlow Frontend Project Structure and Organization Guidelines globs: frontend/**/* alwaysApply: true
Project Structure & Organization
1.1. Directory Structure
App Router Pattern: Utilize Next.js App Router for routing.

frontend/app: Contains public ((public)/) and private ((private)/) sections for routes.

frontend/components: Shared components across the application.

frontend/hooks: Custom React hooks.

frontend/store: Redux store, actions, and reducers.

frontend/styles: Global styles and CSS.

frontend/utils: Utility functions and services.

frontend/types: TypeScript type definitions.

components/ui/: UI/Design system components (e.g., Shadcn UI).

data/: Dedicated directory for mock/initial data (e.g., users.ts, login-details.ts).

1.2. App Organization
Public Sections: Include login and signup in app/(public)/.

Private Sections: Include patient-dashboard and practitioner-dashboard (or similar admin/user dashboards) in app/(private)/.

layout.tsx files for shared layouts within sections.

app/api/: API routes for backend interactions.

app/globals.css: Global styles.

app/layout.tsx: Root layout.

1.3. Component Organization
Feature-based Directories: Organize components by feature (e.g., Login, signUp, patientDashboardComponent) with PascalCase.

Independent Components: Directly in components/.

Higher-Order Components: In components/hoc/.

UI/Design System Components: In components/ui/.

Server Components by Default: Use Server Components for non-interactive parts.

Client Components: Mark explicitly with 'use client' for interactive components.
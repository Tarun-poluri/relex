---
description: Standardized validation function structure and patterns for form validation across the application
globs: **/commonValidations.ts, **/validation*.ts
---

# Form Validation Function Structure Guidelines

## Validation Function Principles

1. **Consistency**: All validation functions must follow the same established patterns
2. **Type Safety**: Use TypeScript key typing for form field validation
3. **Comprehensive**: Cover all possible validation scenarios for each field
4. **Informative**: Provide clear, specific error messages
5. **Maintainable**: Follow a structured approach that is easy to extend

## Standard Validation Function Format

### Function Signature

```typescript
export const validateXXXField = (
  field: keyof XXXFormData,
  value: string | boolean,
  formData: XXXFormData
): string => {
  // Implementation
};
```

### Implementation Pattern A: Direct Return Style

```typescript
switch (field) {
  case "fieldName":
    return !value 
      ? "Field is required" 
      : otherCondition 
      ? "Specific error" 
      : "";
  // More cases...
  default:
    return "";
}
```

### Implementation Pattern B: Variable Assignment Style

```typescript
let error = "";

switch (field) {
  case "fieldName":
    if (!value) error = "Field is required";
    else if (otherCondition) error = "Specific error";
    break;
  // More cases...
}

return error;
```

## Field Validation Guidelines

### Required Field Validation

All required fields must first check for emptiness before other validations:

```typescript
// Pattern A
return !value ? "Field is required" : "";

// Pattern B
if (!value) error = "Field is required";
```

### Conditional Validation

For fields with multiple validation criteria:

```typescript
// Pattern A
if (!value) return "Field is required";
const typedValue = value as string;  // Type casting when needed
if (condition1) return "First specific error";
if (condition2) return "Second specific error";
return "";

// Pattern B
if (!value) error = "Field is required";
else if (condition1) error = "First specific error";
else if (condition2) error = "Second specific error";
```

### Cross-Field Validation

When validating against other fields:

```typescript
// Pattern A
return !value
  ? "Field is required"
  : value !== formData.otherField
  ? "Fields do not match"
  : "";

// Pattern B
if (!value) error = "Field is required";
else if (value !== formData.otherField) error = "Fields do not match";
```

## Common Validation Patterns

### Text Field Validation

```typescript
// Required text field
return !value ? "Field name is required" : "";

// Length restrictions
return value.length < minLength ? `Field must be at least ${minLength} characters` : "";
return value.length > maxLength ? `Field must be at most ${maxLength} characters` : "";

// Character restrictions
return !/[A-Za-z]/.test(value) ? "Field must contain alphabetic characters" : "";
```

### Email Validation

```typescript
return !value
  ? "Email is required"
  : !/\S+@\S+\.\S+/.test(value as string)
  ? "Email is invalid"
  : "";
```

### Password Validation

```typescript
if (!value) return "Password is required";
const password = value as string;
if (password.length < 8) return "Password must be at least 8 characters";
if (!/[A-Z]/.test(password)) return "Password must contain at least one uppercase letter";
if (!/[a-z]/.test(password)) return "Password must contain at least one lowercase letter";
if (!/[0-9]/.test(password)) return "Password must contain at least one number";
if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) return "Password must contain at least one special character";
return "";
```

### Boolean Field Validation

```typescript
return !value ? "You must agree to the terms and conditions" : "";
```

## Adding New Validation Functions

When adding a new validation function:

1. Follow one of the two implementation patterns consistently
2. For similar form types, copy the structure of existing validation functions
3. Add comprehensive validation for each field in the form data type
4. Maintain the same error message style and tone

## Form-Specific Validation Functions

- Use `validateField` pattern for patient forms
- Use `validateSignupPractitionerField` pattern for practitioner forms
- Use `Formvalidate` pattern for login forms
- Create new validation functions for other form types as needed



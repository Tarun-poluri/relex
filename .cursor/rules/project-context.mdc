---
description: Relex Frontend Structure and Best Practices
globs: frontend/**/*
---

# Frontend Structure and Best Practices

## Project Structure
- App Router pattern with Next.js (App directory contains routes)
- Components organized by feature/purpose in `components/` directory
- State management with Redux Toolkit in `store/` directory
- Shared utilities in `utils/` directory
- Custom hooks in `hooks/` directory
- Types defined in `types/` directory
- UI components in `components/ui/`

## Component Organization
- Feature-based component directories with PascalCase (e.g., `PractitionerDashboardComponent/`)
- Independent components directly in `components/` directory
- Higher-order components in `components/hoc/`
- UI/Design system components in `components/ui/`

## State Management
- Redux Toolkit with slices pattern
- Slices in `store/slices/`
- Actions in `store/actions/`
- Reducers in `store/reducers/`
- API calls in `store/serverApiAction/`
- Custom hooks for Redux in `store/hooks.ts`

## App Structure
- Private routes in `app/(private)/`
- Public routes in `app/(public)/`
- API routes in `app/api/`
- Global styles in `app/globals.css`
- Root layout in `app/layout.tsx`

## Styling
- Tailwind CSS for styling
- Custom utility classes in `twMergelib/`
- Global styles in `styles/` directory

## Best Practices
- Use Server Components for non-interactive parts
- Use Client Components with 'use client' directive for interactive components
- TypeScript for type safety
- Follow naming conventions (PascalCase for components, camelCase for functions)
- Organize imports logically
- Use proper component composition and props typing 



---
description: Next.js with TypeScript and Tailwind UI best practices for Relex
globs: **/*.tsx, **/*.ts, frontend/**/*.ts, frontend/**/*.tsx
alwaysApply: true
---

# Next.js Best Practices

## Project Structure
- Organize code into the following directories:
  - `frontend/app`: Contains public and private sections
  - `frontend/components`: Shared components across the application
  - `frontend/hooks`: Custom React hooks
  - `frontend/store`: Redux store, actions, and reducers
  - `frontend/styles`: Global styles and CSS
  - `frontend/utils`: Utility functions and services
  - `frontend/types`: TypeScript type definitions

## App Organization
- Split between `(public)` and `(private)` sections in app directory
- Public sections include `login` and `signup`
- Private sections include `patient-dashboard` and `practitioner-dashboard`
- Use layout.tsx files for shared layouts

## Components
- Use Server Components by default
- Mark client components explicitly with 'use client'
- Organize components by feature (e.g., `Login`, `signUp`, `patientDashboardComponent`)
- Utilize specialized components like `treatmentAssistantComponent`
- Implement proper loading and UI components

## Data Management
- Use Redux store with actions and reducers
- Organize API calls in serverApiAction directory
- Implement proper authentication flows with authAction and authReducer
- Use typed interfaces for all API responses

## Hooks and Utilities
- Create custom hooks for mobile detection (use-mobile.tsx)
- Implement toast notifications with use-toast.ts
- Provide common utilities in utils directory
- Use axios for API communication with proper configuration

## Forms and Validation
- Implement form validations using @commonValidations.ts
- Create reusable form components with proper validation
- Handle error states and user feedback appropriately

## UI Framework
- Use Radix UI (@radix-ui) for accessible components
- Implement responsive designs with mobile-first approach
- Utilize Emotion (@emotion) for styled components
- Follow consistent styling patterns across components

## State Management
- Use Redux with proper action types and reducers
- Implement hooks for accessing store state
- Structure store with appropriate slices for different features
